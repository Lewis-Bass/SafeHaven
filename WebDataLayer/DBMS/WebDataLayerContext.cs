// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace WebDataLayer.DBMS
{
    public partial class WebdatalayerContext : DbContext
    {
        public WebdatalayerContext()
        {
        }

        public WebdatalayerContext(DbContextOptions<WebdatalayerContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Device> Device { get; set; }
        public virtual DbSet<DeviceArk> DeviceArk { get; set; }
        public virtual DbSet<DeviceInformation> DeviceInformation { get; set; }
        public virtual DbSet<License> License { get; set; }
        public virtual DbSet<OptIn> OptIn { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseNpgsql("Host=127.0.0.1;Database=WebDataLayer;Username=postgres;Password=2conjoKids");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<Device>(entity =>
            {
                entity.ToTable("device");

                entity.ForNpgsqlHasComment("device that has a license already installed on it");

                entity.Property(e => e.DeviceId)
                    .HasColumnName("device_id")
                    .HasMaxLength(512)
                    .ValueGeneratedNever()
                    .ForNpgsqlHasComment("unique key for the device");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("timestamp with time zone")
                    .ForNpgsqlHasComment("device was created on this date");

                entity.Property(e => e.DisabledDate)
                    .HasColumnName("disabled_date")
                    .HasColumnType("timestamp with time zone")
                    .ForNpgsqlHasComment("device was disabled on this date");

                entity.Property(e => e.LicenseId)
                    .HasColumnName("license_id")
                    .HasMaxLength(512)
                    .ForNpgsqlHasComment("license.license_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(512)
                    .ForNpgsqlHasComment("Device Name. If it is left blank at creation, it is defaulted.");

                entity.Property(e => e.Part1)
                    .HasColumnName("part1")
                    .HasMaxLength(512)
                    .ForNpgsqlHasComment("device part 1");

                entity.Property(e => e.Part2)
                    .HasColumnName("part2")
                    .HasMaxLength(512)
                    .ForNpgsqlHasComment("device part 2");

                entity.Property(e => e.Part3)
                    .HasColumnName("part3")
                    .HasMaxLength(512)
                    .ForNpgsqlHasComment(@"device part 3
");

                entity.Property(e => e.Part4)
                    .HasColumnName("part4")
                    .HasMaxLength(512)
                    .ForNpgsqlHasComment("device part 4");

                entity.Property(e => e.Part5)
                    .HasColumnName("part5")
                    .HasMaxLength(512)
                    .ForNpgsqlHasComment("device part 5");

                entity.Property(e => e.Part6)
                    .HasColumnName("part6")
                    .HasMaxLength(512)
                    .ForNpgsqlHasComment("device part 6");

                entity.HasOne(d => d.License)
                    .WithMany(p => p.Device)
                    .HasForeignKey(d => d.LicenseId)
                    .HasConstraintName("fk_device_license");
            });

            modelBuilder.Entity<DeviceArk>(entity =>
            {
                entity.HasKey(e => e.ArkId)
                    .HasName("device_ark_pkey");

                entity.ToTable("device_ark");

                entity.ForNpgsqlHasComment("ark installs on every device");

                entity.HasIndex(e => e.ArkName)
                    .HasName("ix_device_ark_ark_name");

                entity.HasIndex(e => e.DeviceId)
                    .HasName("fki_device_device_ark");

                entity.Property(e => e.ArkId)
                    .HasColumnName("ark_id")
                    .HasMaxLength(512)
                    .ValueGeneratedNever()
                    .ForNpgsqlHasComment("unique id for the ark");

                entity.Property(e => e.ArkName)
                    .IsRequired()
                    .HasColumnName("ark_name")
                    .HasMaxLength(512)
                    .ForNpgsqlHasComment("name of the ark - assigned by the user");

                entity.Property(e => e.DeviceId)
                    .IsRequired()
                    .HasColumnName("device_id")
                    .HasMaxLength(512)
                    .ForNpgsqlHasComment("link to device device id");

                entity.Property(e => e.DisabledDate)
                    .HasColumnName("disabled_date")
                    .ForNpgsqlHasComment("date this ark was disabled or put into read only mode");

                entity.Property(e => e.TotalGbFileCount)
                    .HasColumnName("total_gb_file_count")
                    .ForNpgsqlHasComment("total number of files in the ark");

                entity.Property(e => e.TotalGbSize)
                    .HasColumnName("total_gb_size")
                    .ForNpgsqlHasComment("total size of the ark in gb");

                entity.Property(e => e.TotalUpdateDate).HasColumnName("total_update_date");

                entity.HasOne(d => d.Device)
                    .WithMany(p => p.DeviceArk)
                    .HasForeignKey(d => d.DeviceId)
                    .HasConstraintName("fk_device_ark");
            });

            modelBuilder.Entity<DeviceInformation>(entity =>
            {
                entity.ToTable("device_information");

                entity.Property(e => e.DeviceInformationId)
                    .HasColumnName("device_information_id")
                    .ValueGeneratedNever()
                    .ForNpgsqlHasComment("unique key for the record");

                entity.Property(e => e.DeviceId)
                    .HasColumnName("device_id")
                    .HasMaxLength(512)
                    .ForNpgsqlHasComment("license_device.device_id");

                entity.Property(e => e.InformationCategory)
                    .HasColumnName("information_category")
                    .HasMaxLength(512)
                    .ForNpgsqlHasComment("category of the information. example c:\\, d:\\, bios");

                entity.Property(e => e.InformationName)
                    .HasColumnName("information_name")
                    .HasMaxLength(1024)
                    .ForNpgsqlHasComment("name of the information");

                entity.Property(e => e.InformationType)
                    .HasColumnName("information_type")
                    .HasMaxLength(512)
                    .ForNpgsqlHasComment("the type of the information - example disk, cpu, mother board etc");

                entity.Property(e => e.InformationValue)
                    .HasColumnName("information_value")
                    .HasMaxLength(5120)
                    .ForNpgsqlHasComment("value ");

                entity.Property(e => e.ValidDate)
                    .HasColumnName("valid_date")
                    .ForNpgsqlHasComment("the information was valid on this date");

                entity.HasOne(d => d.Device)
                    .WithMany(p => p.DeviceInformation)
                    .HasForeignKey(d => d.DeviceId)
                    .HasConstraintName("fk_device_information_license_device");
            });

            modelBuilder.Entity<License>(entity =>
            {
                entity.ToTable("license");

                entity.Property(e => e.LicenseId)
                    .HasColumnName("license_id")
                    .HasMaxLength(512)
                    .ValueGeneratedNever();

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(256);

                entity.Property(e => e.EmailConfirmed).HasColumnName("email_confirmed");

                entity.Property(e => e.EmailSent).HasColumnName("email_sent");

                entity.Property(e => e.ExpirationDate).HasColumnName("expiration_date");

                entity.Property(e => e.LicensePaidDate).HasColumnName("license_paid_date");

                entity.Property(e => e.MaxArksSupported).HasColumnName("max_arks_supported");

                entity.Property(e => e.MaxDevicesSupported).HasColumnName("max_devices_supported");

                entity.Property(e => e.MaxGbAllArk).HasColumnName("max_gb_all_ark");

                entity.Property(e => e.MaxGbFilesSingleArk).HasColumnName("max_gb_files_single_ark");

                entity.Property(e => e.MaxGbSingleArk).HasColumnName("max_gb_single_ark");

                entity.Property(e => e.MaxViolations).HasColumnName("max_violations");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(256);

                entity.Property(e => e.Password)
                    .HasColumnName("password")
                    .HasMaxLength(512);

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("phone_number")
                    .HasMaxLength(24);
            });

            modelBuilder.Entity<OptIn>(entity =>
            {
                entity.ToTable("opt_in");

                entity.HasIndex(e => e.LicenseId)
                    .HasName("fki_opt_in_license");

                entity.Property(e => e.OptInId)
                    .HasColumnName("opt_in_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.IsCollected)
                    .IsRequired()
                    .HasColumnName("is_collected")
                    .HasDefaultValueSql("true");

                entity.Property(e => e.LicenseId)
                    .HasColumnName("license_id")
                    .HasMaxLength(512);

                entity.Property(e => e.OptionName)
                    .IsRequired()
                    .HasColumnName("option_name")
                    .HasMaxLength(10);

                entity.HasOne(d => d.License)
                    .WithMany(p => p.OptIn)
                    .HasForeignKey(d => d.LicenseId)
                    .HasConstraintName("fk_opt_in_license");
            });

            modelBuilder.HasSequence("userclaims_id_seq")
                .HasMin(0)
                .HasMax(999999999);

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}